<?xml version='1.0'?>
<CodeNarc url='http://www.codenarc.org' version='0.20'><Report timestamp='12/04/2014 09:08:46'/><Project title='Sonar'><SourceDirectory>/home/michael/projetos/gr/dudol/source/dudol/grails-app</SourceDirectory></Project><PackageSummary totalFiles='15' filesWithViolations='3' priority1='0' priority2='5' priority3='6'></PackageSummary><Package path='' totalFiles='15' filesWithViolations='3' priority1='0' priority2='5' priority3='6'></Package><Package path='conf' totalFiles='7' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='conf/spring' totalFiles='1' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='controllers' totalFiles='5' filesWithViolations='3' priority1='0' priority2='5' priority3='6'></Package><Package path='controllers/br' totalFiles='5' filesWithViolations='3' priority1='0' priority2='5' priority3='6'></Package><Package path='controllers/br/treto' totalFiles='5' filesWithViolations='3' priority1='0' priority2='5' priority3='6'></Package><Package path='controllers/br/treto/dudol' totalFiles='5' filesWithViolations='3' priority1='0' priority2='5' priority3='6'><File name='HTTPServiceController.groovy'><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='6'><SourceLine><![CDATA[import java.io.ByteArrayOutputStream]]></SourceLine></Violation><Violation ruleName='UnusedImport' priority='3' lineNumber='6'><SourceLine><![CDATA[import java.io.ByteArrayOutputStream]]></SourceLine><Message><![CDATA[The [java.io.ByteArrayOutputStream] import is never referenced]]></Message></Violation><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='8'><SourceLine><![CDATA[import java.io.ObjectOutputStream]]></SourceLine></Violation><Violation ruleName='UnusedImport' priority='3' lineNumber='8'><SourceLine><![CDATA[import java.io.ObjectOutputStream]]></SourceLine><Message><![CDATA[The [java.io.ObjectOutputStream] import is never referenced]]></Message></Violation><Violation ruleName='UnnecessaryGroovyImport' priority='3' lineNumber='9'><SourceLine><![CDATA[import java.io.IOException]]></SourceLine></Violation><Violation ruleName='DuplicateImport' priority='3' lineNumber='9'><SourceLine><![CDATA[import java.io.IOException]]></SourceLine></Violation><Violation ruleName='ElseBlockBraces' priority='2' lineNumber='37'><SourceLine><![CDATA[if (post())]]></SourceLine><Message><![CDATA[The else block lacks braces]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='68'><SourceLine><![CDATA[catch (Exception e) {]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='SystemOutPrint' priority='2' lineNumber='116'><SourceLine><![CDATA[System.out.println(response.getStatusLine())]]></SourceLine><Message><![CDATA[Violation in class br.treto.dudol.HTTPServiceController. System.out.println should be replaced with something more robust]]></Message></Violation></File><File name='ScheduleController.groovy'><Violation ruleName='UnusedMethodParameter' priority='2' lineNumber='13'><SourceLine><![CDATA[def index(Integer max, String invertKey) {]]></SourceLine><Message><![CDATA[Violation in class ScheduleController. Method parameter [invertKey] is never referenced in the method index of class br.treto.dudol.ScheduleController]]></Message></Violation></File><File name='EmailController.groovy'><Violation ruleName='ElseBlockBraces' priority='2' lineNumber='22'><SourceLine><![CDATA[if (!params.html || params.html.equals(0)) email = new SimpleEmail().setMsg(params.message)]]></SourceLine><Message><![CDATA[The else block lacks braces]]></Message></Violation></File></Package><Package path='domain' totalFiles='3' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='domain/br' totalFiles='3' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='domain/br/treto' totalFiles='3' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='domain/br/treto/dudol' totalFiles='3' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Rules><Rule name='AssignmentInConditional'><Description><![CDATA[An assignment operator (=) was used in a conditional test. This is usually a typo, and the comparison operator (==) was intended.]]></Description></Rule><Rule name='CatchError'><Description><![CDATA[Catching Error is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.]]></Description></Rule><Rule name='CatchException'><Description><![CDATA[Catching Exception is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></Description></Rule><Rule name='CatchNullPointerException'><Description><![CDATA[Catching NullPointerException is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.]]></Description></Rule><Rule name='CatchRuntimeException'><Description><![CDATA[Catching RuntimeException is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></Description></Rule><Rule name='ClassNameSameAsFilename'><Description><![CDATA[Reports files containing only one top level class / enum / interface which is named differently than the file.]]></Description></Rule><Rule name='CloneableWithoutClone'><Description><![CDATA[A class that implements java.lang.Cloneable should define a clone() method.]]></Description></Rule><Rule name='ConfusingTernary'><Description><![CDATA[In a ternary expression avoid negation in the test. For example, rephrase: "(x != y) ? diff : same" as: "(x == y) ? same : diff". Consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as "does the error case go first?" or "does the common case go first?".]]></Description></Rule><Rule name='DuplicateCaseStatement'><Description><![CDATA[Check for duplicate case statements in a switch block, such as two equal integers or strings.]]></Description></Rule><Rule name='DuplicateImport'><Description><![CDATA[Duplicate import statements are unnecessary.]]></Description></Rule><Rule name='ElseBlockBraces'><Description><![CDATA[Use braces for else blocks, even for a single statement. By default, braces are not required for an else if it is followed immediately by an if. Set the bracesRequiredForElseIf property to true to require braces is that situation as well.]]></Description></Rule><Rule name='EmptyCatchBlock'><Description><![CDATA[In most cases, exceptions should not be caught and ignored (swallowed).]]></Description></Rule><Rule name='EmptyClass'><Description><![CDATA[Reports classes without methods, fields or properties. Why would you need a class like this?]]></Description></Rule><Rule name='EmptyElseBlock'><Description><![CDATA[Empty else blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyFinallyBlock'><Description><![CDATA[Empty finally blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyForStatement'><Description><![CDATA[Empty for statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyIfStatement'><Description><![CDATA[Empty if statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyInstanceInitializer'><Description><![CDATA[An empty class instance initializer was found. It is safe to remove it.]]></Description></Rule><Rule name='EmptyMethod'><Description><![CDATA[A method was found without an implementation. If the method is overriding or implementing a parent method, then mark it with the @Override annotation.]]></Description></Rule><Rule name='EmptyStaticInitializer'><Description><![CDATA[An empty static initializer was found. It is safe to remove it.]]></Description></Rule><Rule name='EmptySwitchStatement'><Description><![CDATA[Empty switch statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptySynchronizedStatement'><Description><![CDATA[Empty synchronized statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyTryBlock'><Description><![CDATA[Empty try blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyWhileStatement'><Description><![CDATA[Empty while statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EqualsAndHashCode'><Description><![CDATA[If either the equals(Object) or the hashCode() methods are overridden within a class, then both must be overridden.]]></Description></Rule><Rule name='EqualsOverloaded'><Description><![CDATA[The class has an equals method, but the parameter of the method is not of type Object. It is not overriding equals but instead overloading it.]]></Description></Rule><Rule name='GrailsServletContextReference'><Description><![CDATA[Checks for references to the servletContext object from within Grails controller and taglib classes.]]></Description></Rule><Rule name='GrailsStatelessService'><Description><![CDATA[Checks for fields on Grails service classes. Grails service classes are singletons, by default, and so they should be reentrant and typically stateless. The ignoreFieldNames property (dataSource,scope,sessionFactory, transactional,*Service) specifies one or more field names that should be ignored. The ignoreFieldTypes property (null) specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').]]></Description></Rule><Rule name='HashtableIsObsolete'><Description><![CDATA[The java.util.Hashtable class is effectively obsolete. Use the Java Collections Framework classes instead, including HashMap or ConcurrentHashMap. See the JDK javadoc.]]></Description></Rule><Rule name='ImportFromSamePackage'><Description><![CDATA[An import of a class that is within the same package is unnecessary.]]></Description></Rule><Rule name='ImportFromSunPackages'><Description><![CDATA[Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.]]></Description></Rule><Rule name='InvertedIfElse'><Description><![CDATA[An inverted if-else statement is one in which there is a single if statement with a single else branch and the boolean test of the if is negated. For instance "if (!x) false else true". It is usually clearer to write this as "if (x) true else false".]]></Description></Rule><Rule name='NestedBlockDepth'><Description><![CDATA[Checks for blocks or closures nested more than maxNestedBlockDepth (5) levels deep.]]></Description></Rule><Rule name='NestedSynchronization'><Description><![CDATA[Nested synchronized statements should be avoided. Nested synchronized statements are either useless (if the lock objects are identical) or prone to deadlock.]]></Description></Rule><Rule name='PrintStackTrace'><Description><![CDATA[Checks for calls to printStackTrace().]]></Description></Rule><Rule name='Println'><Description><![CDATA[Checks for calls to this.print(), this.println() or this.printf().]]></Description></Rule><Rule name='ReturnFromFinallyBlock'><Description><![CDATA[Returning from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='SynchronizedMethod'><Description><![CDATA[This rule reports uses of the synchronized keyword on methods. Synchronized methods are the same as synchronizing on 'this', which effectively make your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.]]></Description></Rule><Rule name='SystemErrPrint'><Description><![CDATA[Checks for calls to System.err.print(), System.err.println() or System.err.printf().]]></Description></Rule><Rule name='SystemOutPrint'><Description><![CDATA[Checks for calls to System.out.print(), System.out.println() or System.out.printf().]]></Description></Rule><Rule name='SystemRunFinalizersOnExit'><Description><![CDATA[Method calls to System.runFinalizersOnExit() should not be allowed. This method is inherently non-thread-safe, may result in data corruption, deadlock, and may effect parts of the program far removed from it's call point. It is deprecated, and it's use strongly discouraged.]]></Description></Rule><Rule name='ThreadYield'><Description><![CDATA[Method calls to Thread.yield() should not be allowed. This method has no useful guaranteed semantics, and is often used by inexperienced programmers to mask race conditions.]]></Description></Rule><Rule name='ThrowError'><Description><![CDATA[Checks for throwing an instance of java.lang.Error.]]></Description></Rule><Rule name='ThrowException'><Description><![CDATA[Checks for throwing an instance of java.lang.Exception.]]></Description></Rule><Rule name='ThrowExceptionFromFinallyBlock'><Description><![CDATA[Throwing an exception from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='ThrowNullPointerException'><Description><![CDATA[Checks for throwing an instance of java.lang.NullPointerException.]]></Description></Rule><Rule name='ThrowRuntimeException'><Description><![CDATA[Checks for throwing an instance of java.lang.RuntimeException.]]></Description></Rule><Rule name='ThrowThrowable'><Description><![CDATA[Checks for throwing an instance of java.lang.Throwable.]]></Description></Rule><Rule name='UnnecessaryGroovyImport'><Description><![CDATA[A Groovy file does not need to include an import for classes from java.lang, java.util, java.io, java.net, groovy.lang and groovy.util, as well as the classes java.math.BigDecimal and java.math.BigInteger.]]></Description></Rule><Rule name='UnusedImport'><Description><![CDATA[Imports for a class that is never referenced within the source file is unnecessary.]]></Description></Rule><Rule name='UnusedMethodParameter'><Description><![CDATA[This rule finds instances of method parameters not being used. It does not analyze private methods (that is done by the UnusedPrivateMethodParameter rule) or methods marked @Override.]]></Description></Rule><Rule name='UnusedPrivateField'><Description><![CDATA[Checks for private fields that are not referenced within the same class.]]></Description></Rule><Rule name='UnusedPrivateMethod'><Description><![CDATA[Checks for private methods that are not referenced within the same class.]]></Description></Rule><Rule name='UnusedPrivateMethodParameter'><Description><![CDATA[Checks for parameters to private methods that are not referenced within the method body.]]></Description></Rule><Rule name='UnusedVariable'><Description><![CDATA[Checks for variables that are never referenced. The ignoreVariableNames property (null) specifies one or more variable names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></Description></Rule><Rule name='VectorIsObsolete'><Description><![CDATA[The java.util.Vector class is effectively obsolete. Use the Java Collections Framework classes instead, including ArrayList or Collections.synchronizedList(). See the JDK javadoc.]]></Description></Rule><Rule name='VolatileLongOrDoubleField'><Description><![CDATA[Long or double fields should not be declared as volatile. Java specifies that reads and writes from such fields are atomic, but many JVM's have violated this specification. Unless you are certain of your JVM, it is better to synchronize access to such fields rather than declare them volatile. This rule flags fields marked volatile when their type is double or long or the name of their type is "Double" or "Long".]]></Description></Rule></Rules></CodeNarc>